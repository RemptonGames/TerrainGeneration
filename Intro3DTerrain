int x, y; 
float z1, z2; 
float increment = 0.025; 
int scale = 5; 
int numRows, numColumns; 
int zScale = 200; 
int xOffset, yOffset;
float terrainIncrement  = 0.005; 
float t1, t2; 
float m1, m2; 
void setup() {
  size(1280, 720, P3D); 
  noiseSeed(10052014);
  numRows = height / scale; 
  numColumns = width / scale;
}

void draw() {
  background(255, 255, 255); 
  noiseDetail(3, 0.5); 
  translate(0, height / 2); 
  rotateX(radians(60)); 
  for (y = 0; y < numRows; y++) {
    beginShape(TRIANGLE_STRIP); 
    for (x = 0; x <= numColumns; x++) {
      z1 = abs((noise((x + xOffset) * increment, (y + yOffset) * increment, 0) * 2) - 1); 
      z2 = abs((noise((x + xOffset) * increment, (y + 1+ yOffset) * increment, 0) * 2) - 1); 
      if (z1 > 0.7) {
        fill(255);
      } else if (z1 > 0.4)
      {
        fill(112, 84, 27);
      } else if (z1 > 0.05)
      {
        fill(17, 92, 24);
      } else
      {
        fill(24, 163, 156);
      }
      t1 = noise((x + xOffset) * terrainIncrement, (y + yOffset) * terrainIncrement, 10) * 255; 
      t2 = noise((x + xOffset) * terrainIncrement, (y + 1 + yOffset) * terrainIncrement, 10) * 255;
      //fill(t1);
      if (t1 < 102) m1 = 50; 
      else if (t1 < 152) m1 = 50 + ((t1 - 102) * 3);
      else m1 = 200; 
      if (t2 < 102) m2 = 50; 
      else if (t2 < 152) m2 = 50 + ((t2 - 102) * 3);
      else m2 = 200; 
      z1 = z1 * m1; 
      z2 = z2 * m2; 

      vertex(x * scale, y * scale, z1); 
      vertex(x * scale, (y + 1) * scale, z2);
    }
    endShape();
  }
  if (keyPressed)
  {
    //println(keyCode); 
    if (key == CODED)
    {
      if (keyCode == UP)
      {
        yOffset -= 1;
      } else if (keyCode == DOWN)
      {
        yOffset += 1;
      } else if (keyCode == LEFT) 
      {
        xOffset -= 1;
      } else if (keyCode == RIGHT)
      {
        xOffset += 1;
      }
    }
  }
}
